from db import pets

from aiogram import Dispatcher, types, F
from aiogram.filters import Command

from keyboards import main_kb, food_kb, BTN_EXIT, BTN_FEED, BTN_PLAY, BTN_SLEEP, BTN_STATUS


def progress_bar(value: int, length: int):
    filled = int(value/100 * 10)
    return "üü©" * filled + "‚¨õ" * (length - filled)


async def register_handlers(dp: Dispatcher): #–∫–∞—Ä—Ç–æ—Ç–µ–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
    dp.message.register(start_handler, Command("start"))
    dp.message.register(play_pet,F.text == BTN_PLAY)
    dp.message.register(feed_pet, F.text == BTN_FEED)
    dp.message.register(status_pet, F.text == BTN_STATUS)
    dp.callback_query.register(food_callback_handler, lambda c: c.data.startswith("feed_")) # –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    

# –ó–¥–µ—Å—å –ª–µ–∂–∞—Ç –≤—Å–µ –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π - –¥–∏—Å–ø–µ—Ç—á–µ—Ä(–ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π)

async def start_handler(message: types.Message): # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∫–æ–º–∞–Ω–¥—É: start
    user_id = message.from_user.id # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ë–æ—Ç - –ø–∏—Ç–æ–º—Ü—ã
    if user_id not in pets:
        new_pet = {
            "name": "Baksüòú",
            "hunger": 50, # –ø–∞—Ä–∞–º–µ—Ç—Ä –≥–æ–ª–æ–¥
            "energy": 50, # –ø–∞—Ä–∞–º–µ—Ç—Ä —ç–Ω–µ—Ä–≥–∏—è
            "happiness": 50 # –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—á–∞—Å—Ç—å—è

        }
        pets[user_id] = new_pet # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –º—ã —Å–æ–∑–¥–∞—ë–º –µ–º—É –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n" # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏
        f"–ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å–æ —Å–≤–æ–∏–º –ø–∏—Ç–æ–º—Ü–µ–º: {pets[user_id]["name"]}!\n"
        f"–ü–æ–∑–∞–±–æ—Ç—å—Å—è –æ –Ω—ë–º!",
        reply_markup=main_kb
    )


async def feed_pet(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    pet = pets[user_id]
    await message.answer(f"–ß–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫—Ä–º–∏—Ç—å {pet['name']}?", reply_markup=food_kb)

    
    # pet["hunger"] = min(pet["hunger"] + 10, 100) # –§—É–Ω–∫—Ü–∏—è –º–∏–Ω–∏–º—É–º–∞
    # pet["energy"] = max(pet["energy"] - 5, 0)
    # await message.answer(f"{pet['name']} –≤–∫—É—Å–Ω–æ –ø–æ–∫—É—à–∞–ª!")


async def play_pet(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    pet = pets[user_id]
    pet["happiness"] = min(pet["happiness"] + 10, 100) # –§—É–Ω–∫—Ü–∏—è –º–∏–Ω–∏–º—É–º–∞
    pet["energy"] = max(pet["energy"] - 15, 0)
    await message.answer(f"{pet['name']} –í–µ—Å–µ–ª–æ –ø–æ–∏–≥—Ä–∞–ª!")


async def status_pet(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    pet = pets[user_id]
    hun = pet['hunger']
    en = pet['energy']
    hap = pet['happiness']

    status = (
        f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ {pet['name']}:\n"
        f"–°—ã—Ç–æ—Å—Ç—å: {hun}% {progress_bar(hun, 10)}\n"
        f"–≠–Ω–µ—Ä–≥–∏—è: {en}% {progress_bar(en, 10)}\n"
        f"–°—á–∞—Å—Ç—å–µ: {hap}% {progress_bar(hap, 10)}"
    )
    await message.answer(status)



async def food_callback_handler(callback: types.CallbackQuery): # –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫
    user_id = callback.from_user.id
    if user_id not in pets:
        await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")# –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return
    
    pet = pets[user_id]
    food = callback.data
    message = "" # –ì–¥–µ –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    h = pet["hunger"]

    if food == "feed_steak":
      h =  pet["hunger"] + 20
      message = f"–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ {pet['name']} –≤–∫—É—Å–Ω—ã–º —Å—Ç–µ–π–∫–æ–º"

    elif food == "feed_turkey":
      h =  pet["hunger"] + 15
      message = f"–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ {pet['name']} –≤–∫—É—Å–Ω–æ–π –∏–Ω–¥–µ–π–∫–æ–π"  

    elif food == "feed_water":
      h =  pet["hunger"] + 5
      message = f"–í—ã –¥–∞–ª–∏ {pet['name']} –Ω–µ–º–Ω–æ–≥–æ –≤–æ–¥—ã!"

    pet["hunger"] = min(100, h)

    # –î–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_text(message)
    await callback.answer(
        f"–°—ã—Ç–æ—Å—Ç—å {pet['name']} -- {pet['hunger']}/100\n"
        f"{progress_bar(pet['hunger'], 10)}"        
        )

    

