import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F

import asyncio 

load_dotenv()
BOT_TOKEN = os.getenv("TG_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ë–æ—Ç - –ø–∏—Ç–æ–º—Ü—ã

pets = {} # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞(—Å–ª–æ–≤–∞—Ä—å)

 # –î–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—Ç–∞
main_kb = types.ReplyKeyboardMarkup(
    keyboard=[
       [types.KeyboardButton(text="üéâ–ü–æ–∫–æ—Ä–º–∏—Ç—å"), types.KeyboardButton(text="üéà–ü–æ–∏–≥—Ä–∞—Ç—å")],
       [types.KeyboardButton(text="üí§–°–ø–∞—Ç—å"), types.KeyboardButton(text="üõ†–°—Ç–∞—Ç—É—Å")],
       [types.KeyboardButton(text="üé∫–í—ã—Ö–æ–¥")] # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É - –≤–Ω–∏–∑—É –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ "–≤—ã—Ö–æ–¥"
    ],
    resize_keyboard=True # –†–∞—Å—Å—Ç—è–≥–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —ç–∫—Ä–∞–Ω
 )

@dp.message(Command("start"))
async def start_handler(message: types.Message): # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∫–æ–º–∞–Ω–¥—É: start
    user_id = message.from_user.id # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if user_id not in pets:
        new_pet = {
            "name": "Baksüòú",
            "hunger": 50, # –ø–∞—Ä–∞–º–µ—Ç—Ä –≥–æ–ª–æ–¥
            "energy": 50, # –ø–∞—Ä–∞–º–µ—Ç—Ä —ç–Ω–µ—Ä–≥–∏—è
            "happiness": 50 # –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—á–∞—Å—Ç—å—è

        }
        pets[user_id] = new_pet # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –º—ã —Å–æ–∑–¥–∞—ë–º –µ–º—É –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n" # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏
        f"–ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å–æ —Å–≤–æ–∏–º –ø–∏—Ç–æ–º—Ü–µ–º: {pets[user_id]["name"]}!\n"
        f"–ü–æ–∑–∞–±–æ—Ç—å—Å—è –æ –Ω—ë–º!",
        reply_markup=main_kb
    )

@dp.message(F.text == "üéâ–ü–æ–∫–æ—Ä–º–∏—Ç—å") # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç
async def feed_pet(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    pet = pets[user_id]
    pet["hunger"] = min(pet["hunger"] + 10, 100) # –§—É–Ω–∫—Ü–∏—è –º–∏–Ω–∏–º—É–º–∞
    pet["energy"] = max(pet["energy"] - 5, 0)
    await message.answer(f"{pet['name']} –≤–∫—É—Å–Ω–æ –ø–æ–∫—É—à–∞–ª!")

@dp.message(F.text == "üéà–ü–æ–∏–≥—Ä–∞—Ç—å") # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç
async def play_pet(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    pet = pets[user_id]
    pet["happiness"] = min(pet["happiness"] + 10, 100) # –§—É–Ω–∫—Ü–∏—è –º–∏–Ω–∏–º—É–º–∞
    pet["energy"] = max(pet["energy"] - 15, 0)
    await message.answer(f"{pet['name']} –í–µ—Å–µ–ª–æ –ø–æ–∏–≥—Ä–∞–ª!")


def progress_bar(value: int, length: int):
    filled = int(value/100 * 10)
    return "üü©" * filled + "‚¨õ" * (length - filled)

@dp.message(F.text == "üõ†–°—Ç–∞—Ç—É—Å") # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç
async def status_pet(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pets:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    pet = pets[user_id]
    hun = pet['hunger']
    en = pet['energy']
    hap = pet['happiness']

    status = (
        f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ {pet['name']}:\n"
        f"–°—ã—Ç–æ—Å—Ç—å: {hun}% {progress_bar(hun, 10)}\n"
        f"–≠–Ω–µ—Ä–≥–∏—è: {en}% {progress_bar(en, 10)}\n"
        f"–°—á–∞—Å—Ç—å–µ: {hap}% {progress_bar(hap, 10)}"
    )
    await message.answer(status)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)
   

if __name__== "__main__":
    asyncio.run(main())